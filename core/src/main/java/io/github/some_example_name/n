package io.github.some_example_name;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ScreenUtils;
import com.badlogic.gdx.math.MathUtils;

public class Main extends ApplicationAdapter {
    private ShapeRenderer sr;
    private Player player;
    private Array<Platform> platforms;
    private Array<Spike> spikes;
    private float platformTimer;
    private float spikeTimer;
    private final float platformspawn = 1f;
    private final float spikespawn = 2.5f;
    private final int screenW = 1980;
    private final int screenH = 1080;
    private final int groundH = 200;
    private final int playerStartX = 140;
    private final int playerStartY = 200;
    private Matrix4 defaultMatrix;

    @Override
    public void create() {
        sr = new ShapeRenderer();
        resetGame();
    }

    /**
     * Resets game to initial state
     */
    private void resetGame() {
        player = new Player(playerStartX, playerStartY, 44);

        platforms = new Array<>();
        spikes = new Array<>();
        platformTimer = 0;
        spikeTimer = 0;

        // Add initial platform to get started
        platforms.add(new Platform(screenW, 300, 120, 20, 5));
    }

    @Override
    public void render() {
        float deltaTime = Gdx.graphics.getDeltaTime();
        ScreenUtils.clear(0.01f, 0f, 0.5f, 1f);

        // Handle game updates
        handleInput();
        updatePlatforms(deltaTime);
        updateSpikes(deltaTime);
        player.update(deltaTime, platforms, groundH);

        // Check for collisions with spikes
        checkSpikeCollisions();

        // Draw everything
        drawGame();
    }

    /**
     * Handles user input
     */
    private void handleInput() {
        if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE)) {
            player.jump();
        }
    }

    /**
     * Updates platform spawning and movement
     * @param deltaTime Time since last frame
     */
    private void updatePlatforms(float deltaTime) {
        // Platform spawning
        platformTimer += deltaTime;
        if (platformTimer >= platformspawn) {
            spawnNewPlatform();
        }

        // Update existing platforms
        for (int i = platforms.size - 1; i >= 0; i--) {
            Platform platform = platforms.get(i);
            platform.update(deltaTime);

            // Remove platforms that moved off-screen
            if (platform.getX() + platform.getWidth() < 0) {
                platforms.removeIndex(i);
            }
        }
    }

    /**
     * Updates spike spawning and movement
     */
    private void updateSpikes(float deltaTime) {
        // Spike spawning
        spikeTimer += deltaTime;
        if (spikeTimer >= spikespawn) {
            spawnNewSpike();
        }

        // Update existing spikes
        for (int i = spikes.size - 1; i >= 0; i--) {
            Spike spike = spikes.get(i);
            spike.update(deltaTime);

            // Remove spikes that moved off-screen
            if (spike.getX() + spike.getWidth() < 0) {
                spikes.removeIndex(i);
            }
        }
    }

    /**
     * Spawns a new platform with random properties
     */
    private void spawnNewPlatform() {
        platformTimer = 0;
        int platformHeight = MathUtils.random(groundH + 50, (screenH / 2)-100);
        int platformWidth = MathUtils.random(80, 210);
        float platformSpeed = 5f;

        platforms.add(new Platform(screenW, platformHeight, platformWidth, 20, platformSpeed));
    }

    /**
     * Spawns a new spike on the ground
     */
    private void spawnNewSpike() {
        spikeTimer = 0;
        // Randomize if we actually spawn a spike (70% chance)
        if (MathUtils.random() < 0.7f) {
            int spikeWidth = MathUtils.random(30, 40);
            int spikeHeight = MathUtils.random(30, 50);
            float spikeSpeed = 5f;

            spikes.add(new Spike(screenW, groundH, spikeWidth, spikeHeight, spikeSpeed));
        }
    }

    /**
     * Checks for collisions between player and spikes
     */
    private void checkSpikeCollisions() {
        for (Spike spike : spikes) {
            if (player.getEdges().overlaps(spike.getEdges())) {
                // Player hit a spike, reset the game
                resetGame();
                return;
            }
        }
    }

    /**
     * Handles all drawing operations
     */
    private void drawGame() {
        sr.begin(ShapeRenderer.ShapeType.Filled);

        drawGround();
        drawPlatforms();
        drawSpikes();
        drawPlayer();

        sr.end();
    }

    /**
     * Draws the ground elements
     */
    private void drawGround() {
        sr.setColor(Color.valueOf("ffffff"));
        sr.rect(0, 0, screenW, groundH);
        sr.setColor(Color.valueOf("0a0644"));
        sr.rect(0, 0, screenW, groundH-1);
    }

    /**
     * Draws all platforms
     */
    private void drawPlatforms() {
        sr.setColor(Color.valueOf("55c4ee"));
        for (Platform platform : platforms) {
            sr.rect(platform.getX(), platform.getY(), platform.getWidth(), platform.getHeight());
        }
    }

    /**
     * Draws all spikes as triangles
     */
    private void drawSpikes() {
        sr.setColor(Color.valueOf("ff3333"));
        for (Spike spike : spikes) {
            float x = spike.getX();
            float y = spike.getY();
            float width = spike.getWidth();
            float height = spike.getHeight();

            // Draw spike as triangle
            sr.triangle(
                x, y,                    // Bottom left
                x + width, y,            // Bottom right
                x + (width / 2), y + height  // Top center
            );
        }
    }

    /**
     * Draws the player with rotation
     */
    private void drawPlayer() {
        // Save the current transformation matrix
        defaultMatrix = sr.getTransformMatrix().cpy();

        // Get player properties
        float playerCenterX = player.getX() + player.getSize() / 2;
        float playerCenterY = player.getY() + player.getSize() / 2;
        float size = player.getSize();

        // Apply player transformation matrix
        Matrix4 playerMatrix = createPlayerMatrix(playerCenterX, playerCenterY, player.getRotation());
        sr.setTransformMatrix(playerMatrix);

        // Draw the player as two triangles forming a square
        drawPlayerSquare(size);

        // Restore the original transformation matrix
        sr.setTransformMatrix(defaultMatrix);
    }

    /**
     * Creates a transformation matrix for the player
     * @param centerX Center X coordinate
     * @param centerY Center Y coordinate
     * @param rotation Rotation angle in degrees
     * @return Transformation matrix
     */
    private Matrix4 createPlayerMatrix(float centerX, float centerY, float rotation) {
        Matrix4 matrix = new Matrix4();
        matrix.setToTranslation(centerX, centerY, 0);
        matrix.rotate(0, 0, 1, rotation);
        return matrix;
    }

    /**
     * Draws the player as a square made of two triangles
     * @param size Size of the player
     */
    private void drawPlayerSquare(float size) {
        sr.setColor(255, 140, 0, 255);

        // First triangle (bottom-left, bottom-right, top-right)
        sr.triangle(
            -size/2, -size/2,  // bottom-left
            size/2, -size/2,   // bottom-right
            size/2, size/2     // top-right
        );

        // Second triangle (bottom-left, top-right, top-left)
        sr.triangle(
            -size/2, -size/2,  // bottom-left
            size/2, size/2,    // top-right
            -size/2, size/2    // top-left
        );
    }

    @Override
    public void dispose() {
        sr.dispose();
    }
}
